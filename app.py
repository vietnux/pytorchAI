import os
import utils.generate as genImg
import utils.img2Img as img2Img
import tkinter as tk
from tkinter import messagebox, ttk
from tkinter import filedialog
from PIL import Image, ImageTk

print("·ª®ng d·ª•ng ƒëang ch·∫°y... M·ªü c·ª≠a s·ªï giao di·ªán!")
file_selected = ""


def view_image(image_path):
    img = Image.open(image_path)
    img.thumbnail((400, 400))
    img = ImageTk.PhotoImage(img)

    def update_image():
        canvas_img.create_image(0, 0, anchor="nw", image=img)
        canvas_img.image = img
        canvas_img.config(scrollregion=canvas.bbox("all"))
        status_label.config(text="T·∫°o ·∫£nh th√†nh c√¥ng!")

    root.after(10, update_image)


def generate_image():
    global file_selected
    prompt = prompt_entry.get("1.0", tk.END).strip()
    width = prompt_width.get()
    height = prompt_height.get()
    NUM_STEPS = step_scale.get()

    if not prompt:
        messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p m√¥ t·∫£ h√¨nh ·∫£nh!")
        return

    try:
        width = int(width)
        height = int(height)
        if width <= 0 or height <= 0:
            raise ValueError("Chi·ªÅu r·ªông v√† chi·ªÅu cao ph·∫£i l·ªõn h∆°n 0!")
    except ValueError:
        messagebox.showerror("L·ªói", "Chi·ªÅu r·ªông v√† chi·ªÅu cao ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng!")
        return

    status_label.config(text="Kh·ªüi ƒë·ªông m√¥ h√¨nh")
    root.update_idletasks()
    if file_selected:
        img2Img.init_model(combo.get(), status_label)
        img2Img.generate_image(
            file_selected,
            prompt,
            width,
            height,
            NUM_STEPS,
            status_label,
            progress_bar,
            callback=view_image,
            root=root,
        )
    else:
        genImg.init_model(combo.get(), status_label)
        genImg.generate_image(
            prompt,
            width,
            height,
            NUM_STEPS,
            status_label,
            progress_bar,
            callback=view_image,
            root=root,
        )


def list_models():
    directory = os.path.join(os.path.dirname(__file__), "models")
    return [entry.name for entry in os.scandir(directory) if entry.is_dir()]


def browse_folder():
    """M·ªü h·ªôp tho·∫°i ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn th∆∞ m·ª•c, sau ƒë√≥ c·∫≠p nh·∫≠t Combobox."""
    #
    # if folder_selected:
    subfolders = list_models()
    combo["values"] = subfolders
    if subfolders:
        combo.current(0)  # Ch·ªçn m·ª•c ƒë·∫ßu ti√™n
    else:
        combo.set("")  # X√≥a l·ª±a ch·ªçn n·∫øu kh√¥ng c√≥ th∆∞ m·ª•c con


def choose_image():
    global file_selected
    file_selected = filedialog.askopenfilename(
        title="Ch·ªçn t·ªáp ·∫£nh",
        filetypes=[
            ("T·ªáp ·∫£nh", "*.png *.jpg *.jpeg *.gif *.bmp *.ico"),
            ("T·∫•t c·∫£ c√°c t·ªáp", "*.*"),
        ],
    )
    print("File ·∫£nh: " + file_selected)
    if file_selected:
        display_image(file_selected)

def display_image(file_path):
    image = Image.open(file_path)
    photo = ImageTk.PhotoImage(image)
    image_label.config(image=photo)
    image_label.image = photo

# X√≥a ·∫£nh ƒë·∫ßu v√†o
def clear_image():
    global file_selected
    file_selected = ""
    image_label.config(image='')
    image_label.image = None


# T·∫°o c·ª≠a s·ªï giao di·ªán
root = tk.Tk()
root.title("AI Image Generator")
root.geometry("1024x600")
# root.configure(bg="#f0f0f0")

# canvas = tk.Canvas(root)
# Chia giao di·ªán l√†m 2 ph·∫ßn ngang b·∫±ng nhau
main_frame = tk.Frame(root)
main_frame.pack(fill="both", expand=True)

left_frame = tk.Frame(main_frame)
left_frame.pack(side="left", fill="both", expand=True)

right_frame = tk.Frame(main_frame, width=512)
right_frame.pack(side="right", fill="both", expand=True)

canvas = tk.Canvas(left_frame)
# T·∫°o khung cu·ªôn
scroll_y = tk.Scrollbar(left_frame, orient="vertical", command=canvas.yview)
scroll_x = tk.Scrollbar(left_frame, orient="horizontal", command=canvas.xview)

canvas.config(yscrollcommand=scroll_y.set, xscrollcommand=scroll_x.set)
scroll_y.pack(side="right", fill="y")
scroll_x.pack(side="bottom", fill="x")
canvas.pack(expand=True, fill="both")

frame = tk.Frame(canvas, padx=20, pady=20, relief="groove", bd=2)
frame.pack(fill="x", expand=True)  # frame.pack(fill="both", expand=True)
window_window = canvas.create_window((0, 0), window=frame, anchor="nw", width=canvas.winfo_width() )

def on_canvas_resize(event):
    # C·∫≠p nh·∫≠t l·∫°i chi·ªÅu r·ªông c·ªßa frame khi canvas thay ƒë·ªïi k√≠ch th∆∞·ªõc
    canvas.itemconfig(window_window, width=event.width)
    # C·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc khung m·ªói khi thay ƒë·ªïi k√≠ch th∆∞·ªõc canvas
canvas.bind("<Configure>", on_canvas_resize)

# C·∫≠p nh·∫≠t v√πng cu·ªôn khi n·ªôi dung thay ƒë·ªïi
def update_scroll_region(event=None):
    canvas.config(scrollregion=canvas.bbox("all"))


frame.bind("<Configure>", update_scroll_region)

# Ti√™u ƒë·ªÅ
tk.Label(frame, text="AI Image Generator", font=("Arial", 16, "bold")).pack(
    pady=5, fill="x", expand=True
)

# N√∫t ƒë·ªÉ ch·ªçn th∆∞ m·ª•c
browse_button = ttk.Button(frame, text="Choose image", command=choose_image)
browse_button.pack(pady=10)



tk.Label(frame, text="Nh·∫≠p m√¥ t·∫£ h√¨nh ·∫£nh:", font=("Arial", 12)).pack(pady=10)
prompt_entry = tk.Text(frame, width=50, height=4, font=("Arial", 12), wrap="word")
prompt_entry.pack(pady=5)

# Nh·∫≠p k√≠ch th∆∞·ªõc ·∫£nh
size_label_frame = tk.Frame(frame)
size_label_frame.pack(pady=5, fill="x", expand=True)
tk.Label(size_label_frame, text="Width", font=("Arial", 12)).pack(
    side="left", pady=10, fill="x", expand=True
)
tk.Label(size_label_frame, text="Height", font=("Arial", 12)).pack(
    side="left", pady=10, fill="x", expand=True
)
tk.Label(size_label_frame, text="Number step (1 - 100):", font=("Arial", 12)).pack(
    side="left", pady=5, fill="x", expand=True
)

size_frame = tk.Frame(frame)
size_frame.pack(pady=5, fill="x", expand=True)

prompt_width = tk.Entry(size_frame, width=10)
prompt_width.insert(0, "512")  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh
prompt_width.pack(side="left", padx=5, fill="x", expand=True)



prompt_height = tk.Entry(size_frame, width=10)
prompt_height.insert(0, "512")  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh
prompt_height.pack(side="left", padx=5, fill="x", expand=True)


step_scale = tk.Scale(size_frame, from_=1, to=100, orient="horizontal")
step_scale.set(30)  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh: N·∫øu preview nhanh ‚Üí d√πng 20‚Äì30; N·∫øu xu·∫•t ·∫£nh ch√≠nh th·ª©c ‚Üí d√πng 40‚Äì50+
step_scale.pack(side="left", padx=5, fill="x", expand=True)


prompt_suggestions = {
    "Anime": "anime style, vibrant colors, sharp lines, fantasy background, high detail",
    "Fantasy": "epic landscape, magical creatures, surreal lighting, ancient ruins, detailed",
    "Realistic": "ultra realistic photo, 8k, shallow depth of field, natural lighting",
    "Cyberpunk": "cyberpunk cityscape, neon lights, futuristic buildings, dark tone",
    "Cute Animal": "adorable kitten, big eyes, soft lighting, cartoon style, HD",
    "Sci-fi": "space station, futuristic design, robots, clean lines, glowing elements",

    "European Fairy Tale": "Watercolor fantasy illustration style, bright and dreamy atmosphere, high-detail character design, elegant fairy tale costume, luminous lighting, soft pastel colors, magical realism, inspired by classic European storybooks, cinematic composition",    
    "Vietnamese Fairy Tale": "Vietnamese folk tale illustration style, watercolor-inspired, delicate brush textures, bright and poetic atmosphere, traditional √°o d√†i or ancient costumes, tropical nature elements, rice fields, bamboo, mythical animals, misty lighting, culturally rich ornamentation, inspired by ƒê√¥ng H·ªì folk art and Vietnamese temple murals.",    
    "Japanese Fairy Tale": "a Japanese fairy tale illustration featuring a brave boy with a wooden sword, cherry blossom trees, floating lanterns, a Koi fish spirit companion, traditional kimono, watercolor art style, bright colors, Studio Ghibli-inspired, clean and modern fairy tale mood",
    
    "Chinese Fairy Tale": "a fantasy Chinese fairy tale painting of a dragon flying over lotus lakes, a princess in flowing hanfu on a golden bridge, misty mountains, watercolor brush strokes, vibrant but soft color palette, magical realism, traditional Chinese folklore, elegant and dreamlike",
}

def add_prompt_suggestion():
    selected = suggestion_combo.get()
    if selected in prompt_suggestions:
        prompt = prompt_suggestions[selected]
        current_text = prompt_entry.get("1.0", tk.END).strip()
        if current_text:
            prompt += ", " + current_text
        prompt_entry.delete("1.0", tk.END)
        prompt_entry.insert(tk.END, prompt)

suggestion_combo = ttk.Combobox(frame, values=list(prompt_suggestions.keys()), state="readonly")
suggestion_combo.set("Ch·ªçn ch·ªß ƒë·ªÅ g·ª£i √Ω")  # Placeholder
suggestion_combo.pack(pady=5, fill="x")

add_suggestion_button = ttk.Button(frame, text="Th√™m g·ª£i √Ω", command=add_prompt_suggestion)
add_suggestion_button.pack(pady=5)

def open_prompt_popup():
    popup = tk.Toplevel(root)
    popup.title("Th∆∞ vi·ªán prompt n√¢ng cao")
    popup.geometry("400x400")

    prompts = [
        "Masterpiece, best quality, 8k, ultra detail, stunning light",
        "Fantasy landscape, beautiful scenery, lush forests, glowing effects",
        "Cinematic lighting, portrait, shallow DOF, vibrant color",
        "Cute anime girl, big eyes, colorful hair, school uniform",
        "Cyberpunk street, neon lights, rain, night scene, reflections",
        # üá™üá∫ Phong c√°ch C·ªï t√≠ch ch√¢u √Çu (Grimm, Andersen...)
        "a fairy tale illustration of a magical forest with a little girl in red hood, a big-eyed friendly wolf, dreamy castle in the background, watercolor style, pastel colors, bright and airy lighting, european fairy tale, children storybook illustration, fantasy art",
        # üáªüá≥ Phong c√°ch C·ªï t√≠ch Vi·ªát Nam
        "a fairy tale scene of a young Vietnamese girl riding a white buffalo through lush green rice fields, ancient temples in the background, traditional √°o d√†i dress, bamboo forest, watercolor painting, modern and dreamy, clear sky, Vietnamese folklore, serene and magical atmosphere",
        # üáØüáµ Phong c√°ch C·ªï t√≠ch Nh·∫≠t B·∫£n
        "a Japanese fairy tale illustration featuring a brave boy with a wooden sword, cherry blossom trees, floating lanterns, a Koi fish spirit companion, traditional kimono, watercolor art style, bright colors, Studio Ghibli-inspired, clean and modern fairy tale mood",
        # üá®üá≥ Phong c√°ch C·ªï t√≠ch Trung Hoa
        "a fantasy Chinese fairy tale painting of a dragon flying over lotus lakes, a princess in flowing hanfu on a golden bridge, misty mountains, watercolor brush strokes, vibrant but soft color palette, magical realism, traditional Chinese folklore, elegant and dreamlike",
    ]

    def on_select_prompt(event):
        selected_prompt = prompt_listbox.get(prompt_listbox.curselection())
        prompt_entry.delete("1.0", tk.END)
        prompt_entry.insert(tk.END, selected_prompt)
        popup.destroy()

    prompt_listbox = tk.Listbox(popup, font=("Arial", 11))
    for item in prompts:
        prompt_listbox.insert(tk.END, item)
    prompt_listbox.pack(expand=True, fill="both", padx=10, pady=10)
    prompt_listbox.bind("<Double-Button-1>", on_select_prompt)

popup_prompt_button = ttk.Button(frame, text="M·ªü th∆∞ vi·ªán prompt n√¢ng cao", command=open_prompt_popup)
popup_prompt_button.pack(pady=5)

# subfolders = list_models()

# Combobox ƒë·ªÉ hi·ªÉn th·ªã c√°c th∆∞ m·ª•c con
combo = ttk.Combobox(frame, state="readonly")
combo.pack(pady=10)
combo.pack(fill="x", expand=True, padx=5)
# combo.bind("<<ComboboxSelected>>", lambda event: genImg.init_model( combo.get() ) )
browse_folder()

generate_button = tk.Button(frame, text="T·∫°o ·∫£nh", command=generate_image)
generate_button.pack(pady=10)

# clear_button = ttk.Button(frame, text="X√≥a ·∫£nh ƒë·∫ßu v√†o", command=clear_image)
# clear_button.pack()


# Nh√£n ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh
# image_label = tk.Label(root)
image_label = tk.Label(right_frame)
image_label.pack(pady=10)
# Thanh ti·∫øn tr√¨nh
progress_bar = ttk.Progressbar(
    right_frame, orient="horizontal", length=300, mode="determinate"
)
progress_bar.pack(pady=5)

# Nh√£n tr·∫°ng th√°i
status_label = tk.Label(right_frame, text="", font=("Arial", 10), fg="red")
status_label.pack(pady=5)

# Khung ch·ª©a ·∫£nh c√≥ thanh cu·ªôn
image_frame = tk.Frame(right_frame, bg="white", padx=20, pady=20, relief="ridge", bd=2)
image_frame.pack(expand=True, fill="both", padx=10, pady=10)

tk.Label(image_frame, text="·∫¢nh ƒë√£ t·∫°o", font=("Arial", 12, "bold"), bg="white").pack()

# Canvas ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh c√≥ cu·ªôn
canvas_img = tk.Canvas(image_frame, bg="white")
scroll_x = tk.Scrollbar(image_frame, orient="horizontal", command=canvas_img.xview)
scroll_y = tk.Scrollbar(image_frame, orient="vertical", command=canvas_img.yview)

canvas_img.config(xscrollcommand=scroll_x.set, yscrollcommand=scroll_y.set)
scroll_x.pack(side="bottom", fill="x")
scroll_y.pack(side="right", fill="y")
canvas_img.pack(expand=True, fill="both")

# canvas.configure(scrollregion=canvas.bbox("all"))



root.mainloop()
